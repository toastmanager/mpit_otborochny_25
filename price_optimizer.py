import pandas as pd
import numpy as np
import joblib
from typing import Dict, List, Tuple
import warnings

warnings.filterwarnings("ignore")


class PriceOptimizer:
    def __init__(
        self,
        model_path: str = "models/final_model.joblib",
        feature_names_path: str = "models/feature_names.joblib",
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ —Ü–µ–Ω

        Args:
            model_path: –ø—É—Ç—å –∫ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
            feature_names_path: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∏–º–µ–Ω–∞–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        """
        try:
            self.model = joblib.load(model_path)
            self.feature_names = joblib.load(feature_names_path)
            print("‚úÖ –ú–æ–¥–µ–ª—å –∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except FileNotFoundError:
            print("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞.")
            raise

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ–Ω
        self.PRICE_STEP = 10  # –£–º–µ–Ω—å—à–∏–ª–∏ —à–∞–≥ –¥–æ 10 —Ä—É–±–ª–µ–π

    def prepare_features(
        self, carmodel: str, carname: str, platform: str, distance: float, price: float
    ) -> pd.DataFrame:
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        if platform not in ["ios", "android"]:
            print(
                f"‚ö†Ô∏è  –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ '{platform}' –Ω–µ 'ios' –∏–ª–∏ 'android'. –ò—Å–ø–æ–ª—å–∑—É–µ–º 'ios' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
            )
            platform = "ios"

        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ–∏—á–∏
        features = {
            "carmodel": carmodel,
            "carname": carname,
            "platform": platform,
            "distance": distance,
            "price": price,
            "price_per_km": price / distance if distance > 0 else 0,
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∏—á–∏ —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        additional_features = {
            "duration_in_seconds": 1800,  # 30 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "driver_rating": 4.8,  # –≤—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥
            "pickup_in_meters": 500,  # 500 –º–µ—Ç—Ä–æ–≤ –¥–æ –ø–æ–¥–∞—á–∏
            "pickup_in_seconds": 300,  # 5 –º–∏–Ω—É—Ç –¥–æ –ø–æ–¥–∞—á–∏
            "price_start_local": price * 0.8,  # —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ –Ω–∞ 20% –Ω–∏–∂–µ
            "price_bid_local": price,  # —Ç–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞
            "order_hour": 12,  # –ø–æ–ª–¥–µ–Ω—å
            "order_dayofweek": 1,  # –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            "is_night": 0,  # –Ω–µ –Ω–æ—á—å
            "price_per_meter": price / (distance * 1000) if distance > 0 else 0,
            "price_per_second": price / 1800 if distance > 0 else 0,
            "price_increase_abs": price * 0.2,  # —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ 20%
            "price_increase_perc": 20.0,  # 20% —É–≤–µ–ª–∏—á–µ–Ω–∏–µ
            "driver_experience_days": 365,  # 1 –≥–æ–¥ –æ–ø—ã—Ç–∞
            "distance_in_meters_log": np.log(distance * 1000) if distance > 0 else 0,
        }

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ñ–∏—á–∏
        all_features = {**features, **additional_features}

        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame([all_features])

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categorical_features = ["carmodel", "carname", "platform"]
        for col in categorical_features:
            if col in df.columns:
                if (
                    col in self.feature_names
                    and df[col].iloc[0] not in self.feature_names
                ):
                    df[col] = "Other"
                df[col] = df[col].astype(str)

        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏ –µ—Å—Ç—å –≤—Å–µ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        for feature in self.feature_names:
            if feature not in df.columns:
                df[feature] = 0  # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏

        return df[self.feature_names]

    def predict_success_probability(self, features: pd.DataFrame) -> float:
        """
        –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏
        """
        try:
            # –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ 1 (—É—Å–ø–µ—à–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞)
            probability = self.model.predict_proba(features)[0, 1]
            return probability
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {e}")
            return 0.0

    def calculate_expected_value(self, price: float, success_prob: float) -> float:
        """
        –†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥–æ—Ö–æ–¥–∞: —Ü–µ–Ω–∞ √ó –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞
        """
        return price * success_prob

    def find_optimal_price(
        self,
        carmodel: str,
        carname: str,
        platform: str,
        distance: float,
        proposed_price: float,
    ) -> Dict:
        """
        –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥–æ—Ö–æ–¥–∞

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        """
        print(
            f"üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑–∞: {carmodel} {carname}, {distance} –∫–º, –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}"
        )
        print(f"üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞: {proposed_price} —Ä—É–±.")

        results = []

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–Ω—ã –æ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π –¥–æ +300 —Ä—É–±–ª–µ–π —Å —à–∞–≥–æ–º 10
        min_test_price = proposed_price
        max_test_price = proposed_price + 300

        test_prices = np.arange(
            min_test_price, max_test_price + self.PRICE_STEP, self.PRICE_STEP
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—É—é —Ü–µ–Ω—É –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        if proposed_price not in test_prices:
            test_prices = np.append(test_prices, proposed_price)

        test_prices = np.sort(test_prices)

        print(
            f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã –æ—Ç {min_test_price} –¥–æ {max_test_price} —Ä—É–±. (—à–∞–≥: {self.PRICE_STEP} —Ä—É–±.)"
        )

        for price in test_prices:
            features = self.prepare_features(
                carmodel, carname, platform, distance, price
            )
            success_prob = self.predict_success_probability(features)
            expected_value = self.calculate_expected_value(price, success_prob)

            results.append(
                {
                    "price": price,
                    "success_probability": success_prob,
                    "expected_value": expected_value,
                }
            )

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–∂–∏–¥–∞–µ–º–æ–º—É –¥–æ—Ö–æ–¥—É
        results.sort(key=lambda x: x["expected_value"], reverse=True)

        best_option = results[0]
        proposed_option = next(r for r in results if r["price"] == proposed_price)

        recommendation = {
            "proposed_price": {
                "price": proposed_price,
                "success_probability": proposed_option["success_probability"],
                "expected_value": proposed_option["expected_value"],
            },
            "recommended_price": {
                "price": best_option["price"],
                "success_probability": best_option["success_probability"],
                "expected_value": best_option["expected_value"],
            },
        }

        return recommendation

    def print_recommendation(self, recommendation: Dict):
        """
        –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        """
        prop = recommendation["proposed_price"]
        rec = recommendation["recommended_price"]

        print("\n" + "=" * 60)
        print("üí∞ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø –ü–û –¶–ï–ù–û–û–ë–†–ê–ó–û–í–ê–ù–ò–Æ")
        print("=" * 60)

        print(f"üìä –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞: {prop['price']:.0f} —Ä—É–±.")
        print(f"   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: {prop['success_probability']:.1%}")
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: {prop['expected_value']:.0f} —Ä—É–±.")

        print(f"üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–Ω–∞: {rec['price']:.0f} —Ä—É–±.")
        print(f"   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: {rec['success_probability']:.1%}")
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: {rec['expected_value']:.0f} —Ä—É–±.")

        improvement = rec["expected_value"] - prop["expected_value"]
        price_difference = rec["price"] - prop["price"]

        if improvement > 0:
            print(
                f"üìà –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞: +{improvement:.0f} —Ä—É–±. ({improvement / prop['expected_value']:+.1%})"
            )
            print(f"üí∏ –ù–∞—Ü–µ–Ω–∫–∞: +{price_difference:.0f} —Ä—É–±.")
        else:
            print(f"üìâ –£—Ö—É–¥—à–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞: {improvement:.0f} —Ä—É–±.")


def main():
    """
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ —Ü–µ–Ω
    """
    try:
        optimizer = PriceOptimizer()

        # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
        test_orders = [
            {
                "carmodel": "Toyota Camry",
                "carname": "Camry 2.5",
                "platform": "ios",  # –¢–æ–ª—å–∫–æ ios –∏–ª–∏ android
                "distance": 15.5,
                "proposed_price": 450,
            },
            {
                "carmodel": "Kia Rio",
                "carname": "Rio Classic",
                "platform": "android",  # –¢–æ–ª—å–∫–æ ios –∏–ª–∏ android
                "distance": 8.2,
                "proposed_price": 300,
            },
        ]

        for order in test_orders:
            recommendation = optimizer.find_optimal_price(**order)
            optimizer.print_recommendation(recommendation)
            print("\n")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
