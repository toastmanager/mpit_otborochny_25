import warnings
from typing import Dict, Tuple

import joblib
import numpy as np
import pandas as pd

warnings.filterwarnings("ignore")


class ServicePriceOptimizer:
    def __init__(
        self,
        model_path: str = "models/final_model.joblib",
        feature_names_path: str = "models/feature_names.joblib",
    ):
        """
        –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ —Ü–µ–Ω –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ —Ç–∞–∫—Å–∏
        """
        try:
            self.model = joblib.load(model_path)
            self.feature_names = joblib.load(feature_names_path)
            print("‚úÖ –ú–æ–¥–µ–ª—å –∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except FileNotFoundError:
            print("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞.")
            raise

        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
        self.PRICE_STEP = 10
        self.SERVICE_COST_PER_KM = 8
        self.SERVICE_MARGIN_MIN = 0.20
        self.MIN_PRICE_PER_KM = 15
        self.MAX_PRICE_PER_KM = 45
        self.BASE_PRICE = 120

    def prepare_features(
        self,
        carmodel: str,
        carname: str,
        platform: str,
        distance: float,
        price: float,
        order_hour: int = 12,
        driver_rating: float = 4.8,
    ) -> pd.DataFrame:
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ç–æ–ª—å–∫–æ —Å —Ç–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ
        """
        if platform not in ["ios", "android"]:
            platform = "ios"

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏
        features = {
            "carmodel": carmodel,
            "carname": carname,
            "platform": platform,
            "distance": distance,
            "price": price,
            "price_per_km": price / distance if distance > 0 else 0,
            "duration_in_seconds": distance * 180 + 300,  # 3 –º–∏–Ω/–∫–º + 5 –º–∏–Ω –ø–æ–¥–∞—á–∏
            "driver_rating": driver_rating,
            "pickup_in_meters": 500,
            "pickup_in_seconds": 300,
            "price_start_local": max(price * 0.7, self.BASE_PRICE),
            "price_bid_local": price,
            "order_hour": order_hour,
            "order_dayofweek": 1,
            "is_night": 1 if 22 <= order_hour <= 23 or 0 <= order_hour <= 5 else 0,
            "price_per_meter": price / (distance * 1000) if distance > 0 else 0,
            "price_per_second": price / (distance * 180 + 300) if distance > 0 else 0,
            "price_increase_abs": price * 0.2,
            "price_increase_perc": 20.0,
            "driver_experience_days": 365,
            "distance_in_meters_log": np.log(distance * 1000) if distance > 0 else 0,
        }

        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame([features])

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        categorical_features = ["carmodel", "carname", "platform"]
        for col in categorical_features:
            if col in df.columns:
                if (
                    col in self.feature_names
                    and df[col].iloc[0] not in self.feature_names
                ):
                    df[col] = "Other"
                df[col] = df[col].astype(str)

        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for feature in self.feature_names:
            if feature not in df.columns:
                df[feature] = 0

        return df[self.feature_names]

    def predict_success_probability(self, features: pd.DataFrame) -> float:
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—Ö–∞"""
        try:
            return self.model.predict_proba(features)[0, 1]
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {e}")
            return 0.0

    def calculate_realistic_price_range(self, distance: float) -> Tuple[float, float]:
        """–†–∞—Å—á–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω"""
        min_price = max(self.BASE_PRICE, distance * self.MIN_PRICE_PER_KM)
        max_price = distance * self.MAX_PRICE_PER_KM
        return min_price, max_price

    def calculate_service_profit(
        self, price: float, success_prob: float, distance: float
    ) -> Dict:
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ —Å–µ—Ä–≤–∏—Å–∞"""
        service_cost = distance * self.SERVICE_COST_PER_KM + 80
        gross_profit = price - service_cost
        expected_profit = gross_profit * success_prob
        margin = gross_profit / price if price > 0 else 0

        return {
            "price": price,
            "service_cost": service_cost,
            "gross_profit": gross_profit,
            "expected_profit": expected_profit,
            "margin": margin,
            "success_probability": success_prob,
            "price_per_km": price / distance if distance > 0 else 0,
        }

    def find_optimal_service_price(
        self,
        carmodel: str,
        carname: str,
        platform: str,
        distance: float,
        base_price: float,
        order_hour: int = 12,
        driver_rating: float = 4.8,
    ) -> Dict:
        """
        –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        """
        print(f"üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑–∞: {carmodel} {carname}, {distance} –∫–º")
        print(f"üí° –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {base_price} —Ä—É–±.")
        print(f"üïí –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {order_hour}:00, –†–µ–π—Ç–∏–Ω–≥ –≤–æ–¥–∏—Ç–µ–ª—è: {driver_rating}")

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
        min_price, max_price = self.calculate_realistic_price_range(distance)

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        adjusted_base = max(min_price, min(base_price, max_price))
        if adjusted_base != base_price:
            print(f"üìù –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {adjusted_base} —Ä—É–±.")
            base_price = adjusted_base

        print(f"üìä –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: {min_price:.0f} - {max_price:.0f} —Ä—É–±.")
        print(f"   ({self.MIN_PRICE_PER_KM} - {self.MAX_PRICE_PER_KM} —Ä—É–±./–∫–º)")

        # –£–º–Ω—ã–π –ø–æ–¥–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_min = max(min_price, base_price - 50)
        test_max = min(max_price, base_price + 100)

        test_prices = np.arange(test_min, test_max + self.PRICE_STEP, self.PRICE_STEP)
        if base_price not in test_prices:
            test_prices = np.append(test_prices, base_price)
        test_prices = np.sort(test_prices)

        print(
            f"üîé –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(test_prices)} —Ü–µ–Ω –æ—Ç {test_min:.0f} –¥–æ {test_max:.0f} —Ä—É–±."
        )

        results = []
        for price in test_prices:
            features = self.prepare_features(
                carmodel, carname, platform, distance, price, order_hour, driver_rating
            )
            success_prob = self.predict_success_probability(features)
            profit_data = self.calculate_service_profit(price, success_prob, distance)
            results.append(profit_data)

        if not results:
            return {}

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–∂–∏–¥–∞–µ–º–æ–π –ø—Ä–∏–±—ã–ª–∏
        results.sort(key=lambda x: x["expected_profit"], reverse=True)
        base_option = next(r for r in results if r["price"] == base_price)
        best_option = results[0]

        # –ù–∞—Ö–æ–¥–∏–º –≤–∞—Ä–∏–∞–Ω—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –º–∞—Ä–∂–æ–π
        min_margin_options = [
            r for r in results if r["margin"] >= self.SERVICE_MARGIN_MIN
        ]
        min_margin_option = min_margin_options[0] if min_margin_options else base_option

        recommendation = {
            "base_price": base_option,
            "optimal_price": best_option,
            "min_margin_price": min_margin_option,
            "all_options": results[:6],
            "service_cost": base_option["service_cost"],
            "min_margin": self.SERVICE_MARGIN_MIN,
        }

        return recommendation

    def print_recommendation(self, recommendation: Dict):
        """–ß–µ—Ç–∫–∏–π –≤—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        if not recommendation:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            return

        base = recommendation["base_price"]
        optimal = recommendation["optimal_price"]
        min_margin = recommendation["min_margin_price"]

        print("\n" + "=" * 60)
        print("üí∞ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –°–ï–†–í–ò–°–ê")
        print("=" * 60)

        improvement = optimal["expected_profit"] - base["expected_profit"]

        # –û—Å–Ω–æ–≤–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
        if improvement > 5:  # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ
            print(f"üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –£–≤–µ–ª–∏—á–∏—Ç—å —Ü–µ–Ω—É –¥–æ {optimal['price']:.0f} —Ä—É–±.")
            print(
                f"   üìà –ü—Ä–∏–±—ã–ª—å –≤—ã—Ä–∞—Å—Ç–µ—Ç –Ω–∞ +{improvement:.0f} —Ä—É–±. ({improvement / base['expected_profit']:+.0%})"
            )
        elif improvement < -5:  # –£—Ö—É–¥—à–µ–Ω–∏–µ
            print(f"üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –°–Ω–∏–∑–∏—Ç—å —Ü–µ–Ω—É –¥–æ {optimal['price']:.0f} —Ä—É–±.")
            print(f"   üìâ –ü–æ—Ç–µ—Ä–∏ —Å–æ–∫—Ä–∞—Ç—è—Ç—Å—è –Ω–∞ {abs(improvement):.0f} —Ä—É–±.")
        else:
            print(f"üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –û—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–Ω—É {base['price']:.0f} —Ä—É–±.")
            print("   ‚úÖ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –±–ª–∏–∑–∫–∞ –∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π")

        print("\nüìä –î–ï–¢–ê–õ–ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print(
            f"   ‚Ä¢ –¶–µ–Ω–∞: {optimal['price']:.0f} —Ä—É–±. ({optimal['price_per_km']:.1f} —Ä—É–±./–∫–º)"
        )
        print(f"   ‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: {optimal['success_probability']:.1%}")
        print(f"   ‚Ä¢ –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: {optimal['expected_profit']:.0f} —Ä—É–±.")
        print(f"   ‚Ä¢ –ú–∞—Ä–∂–∞: {optimal['margin']:.1%}")
        print(f"   ‚Ä¢ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {recommendation['service_cost']:.0f} —Ä—É–±.")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π
        if optimal["price"] != base["price"]:
            print("\nüìà –°–†–ê–í–ù–ï–ù–ò–ï –° –¢–ï–ö–£–©–ï–ô –¶–ï–ù–û–ô:")
            print(
                f"   –¢–µ–∫—É—â–∞—è: {base['price']:.0f} —Ä—É–±. ‚Üí {base['expected_profit']:.0f} —Ä—É–±. –ø—Ä–∏–±—ã–ª–∏"
            )
            print(
                f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è: {optimal['price']:.0f} —Ä—É–±. ‚Üí {optimal['expected_profit']:.0f} —Ä—É–±. –ø—Ä–∏–±—ã–ª–∏"
            )

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        if len(recommendation["all_options"]) > 1:
            print("\nüèÜ –õ–£–ß–®–ò–ï –í–ê–†–ò–ê–ù–¢–´:")
            for option in recommendation["all_options"]:
                markers = []
                if option["price"] == optimal["price"]:
                    markers.append("–†–ï–ö–û–ú–ï–ù–î–£–ï–ú")
                if (
                    option["price"] == base["price"]
                    and base["price"] != optimal["price"]
                ):
                    markers.append("–¢–ï–ö–£–©–ê–Ø")
                if (
                    option["price"] == min_margin["price"]
                    and min_margin["price"] != optimal["price"]
                ):
                    markers.append("–ú–ò–ù.–ú–ê–†–ñ–ê")

                marker_str = " üëà " + ", ".join(markers) if markers else ""
                print(
                    f"   {option['price']:4.0f}—Ä | {option['expected_profit']:4.0f}—Ä –ø—Ä–∏–±—ã–ª–∏ | {option['success_probability']:4.1%} —à–∞–Ω—Å{marker_str}"
                )


def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞"""
    try:
        optimizer = ServicePriceOptimizer()

        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å —Ä–∞–∑–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º —Å—É—Ç–æ–∫
        test_orders = [
            {
                "carmodel": "Toyota Camry",
                "carname": "Camry 2.5",
                "platform": "ios",
                "distance": 8.5,
                "base_price": 200,
                "order_hour": 18,  # –í–µ—á–µ—Ä
                "driver_rating": 4.9,
            },
            {
                "carmodel": "Kia Rio",
                "carname": "Rio Classic",
                "platform": "android",
                "distance": 5.2,
                "base_price": 150,
                "order_hour": 10,  # –£—Ç—Ä–æ
                "driver_rating": 4.7,
            },
            {
                "carmodel": "Hyundai Solaris",
                "carname": "Solaris 1.6",
                "platform": "ios",
                "distance": 12.0,
                "base_price": 300,
                "order_hour": 23,  # –ù–æ—á—å
                "driver_rating": 4.8,
            },
        ]

        for i, order in enumerate(test_orders, 1):
            print(f"\n{'#' * 60}")
            print(f"üì¶ –ó–ê–ö–ê–ó #{i}")
            print(f"{'#' * 60}")

            recommendation = optimizer.find_optimal_service_price(**order)
            optimizer.print_recommendation(recommendation)

        print(f"\n{'=' * 60}")
        print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù! –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        print(f"{'=' * 60}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
