import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime


def analyze_driver_statistics(df, save_path="visualizations/"):
    """
    –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º
    """
    import os

    os.makedirs(save_path, exist_ok=True)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã
    df["order_timestamp"] = pd.to_datetime(df["order_timestamp"])
    df["driver_reg_date"] = pd.to_datetime(df["driver_reg_date"])

    print("=" * 80)
    print("–ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–û–î–ò–¢–ï–õ–Ø–ú")
    print("=" * 80)

    # –ë–ê–ó–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    total_drivers = df["driver_id"].nunique()
    total_orders = len(df)

    print(f"\nüìä –ë–ê–ó–û–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:")
    print(f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π: {total_drivers:,}")
    print(f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders:,}")
    print(f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è: {total_orders / total_drivers:.1f}")

    # –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ê–ö–¢–ò–í–ù–û–°–¢–ò –í–û–î–ò–¢–ï–õ–ï–ô
    driver_activity = (
        df.groupby("driver_id")
        .agg(
            {
                "order_id": "count",
                "is_done": lambda x: (x == "done").sum(),
                "driver_rating": "mean",
                "driver_reg_date": "first",
                "order_timestamp": ["min", "max"],
                "platform": lambda x: x.mode()[0] if len(x) > 0 else "unknown",
            }
        )
        .reset_index()
    )

    driver_activity.columns = [
        "driver_id",
        "total_orders",
        "completed_orders",
        "avg_rating",
        "reg_date",
        "first_order",
        "last_order",
        "main_platform",
    ]

    driver_activity["completion_rate"] = (
        driver_activity["completed_orders"] / driver_activity["total_orders"] * 100
    ).round(2)
    driver_activity["canceled_orders"] = (
        driver_activity["total_orders"] - driver_activity["completed_orders"]
    )
    driver_activity["cancel_rate"] = (
        driver_activity["canceled_orders"] / driver_activity["total_orders"] * 100
    ).round(2)

    # –ê–Ω–∞–ª–∏–∑ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã
    driver_activity["work_duration_days"] = (
        driver_activity["last_order"] - driver_activity["first_order"]
    ).dt.days
    driver_activity["orders_per_day"] = (
        driver_activity["total_orders"] / driver_activity["work_duration_days"]
    ).round(2)

    print(f"\nüéØ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ö–¢–ò–í–ù–û–°–¢–ò:")
    print(
        f"‚Ä¢ –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–¥–∏—Ç–µ–ª—å: {driver_activity['total_orders'].max():,} –∑–∞–∫–∞–∑–æ–≤"
    )
    print(
        f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è: {driver_activity['total_orders'].mean():.1f}"
    )
    print(f"‚Ä¢ –ú–µ–¥–∏–∞–Ω–∞ –∑–∞–∫–∞–∑–æ–≤: {driver_activity['total_orders'].median():.1f}")

    # –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–Ø –í–û–î–ò–¢–ï–õ–ï–ô –ü–û –ê–ö–¢–ò–í–ù–û–°–¢–ò
    print(f"\nüìà –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–Ø –í–û–î–ò–¢–ï–õ–ï–ô –ü–û –ê–ö–¢–ò–í–ù–û–°–¢–ò:")

    activity_segments = {
        "–í—ã—Å–æ–∫–∞—è (>50 –∑–∞–∫–∞–∑–æ–≤)": len(
            driver_activity[driver_activity["total_orders"] > 50]
        ),
        "–°—Ä–µ–¥–Ω—è—è (11-50 –∑–∞–∫–∞–∑–æ–≤)": len(
            driver_activity[
                (driver_activity["total_orders"] >= 11)
                & (driver_activity["total_orders"] <= 50)
            ]
        ),
        "–ù–∏–∑–∫–∞—è (2-10 –∑–∞–∫–∞–∑–æ–≤)": len(
            driver_activity[
                (driver_activity["total_orders"] >= 2)
                & (driver_activity["total_orders"] <= 10)
            ]
        ),
        "–ï–¥–∏–Ω–∏—á–Ω–∞—è (1 –∑–∞–∫–∞–∑)": len(
            driver_activity[driver_activity["total_orders"] == 1]
        ),
    }

    for segment, count in activity_segments.items():
        percentage = (count / total_drivers) * 100
        print(f"‚Ä¢ {segment}: {count:,} –≤–æ–¥–∏—Ç–µ–ª–µ–π ({percentage:.1f}%)")

    # –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –†–ï–ô–¢–ò–ù–ì–ê–ú
    print(f"\n‚≠ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –†–ï–ô–¢–ò–ù–ì–ê–ú:")
    print(f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {driver_activity['avg_rating'].mean():.3f}")
    print(f"‚Ä¢ –ú–µ–¥–∏–∞–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {driver_activity['avg_rating'].median():.3f}")
    print(f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {driver_activity['avg_rating'].min():.3f}")
    print(f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {driver_activity['avg_rating'].max():.3f}")

    # –í–æ–¥–∏—Ç–µ–ª–∏ —Å –∏–¥–µ–∞–ª—å–Ω—ã–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    perfect_rating_drivers = len(driver_activity[driver_activity["avg_rating"] == 5.0])
    print(
        f"‚Ä¢ –í–æ–¥–∏—Ç–µ–ª–µ–π —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º 5.0: {perfect_rating_drivers:,} ({perfect_rating_drivers / total_drivers * 100:.1f}%)"
    )

    # –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ü–õ–ê–¢–§–û–†–ú–ê–ú
    if "platform" in df.columns:
        print(f"\nüì± –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ü–õ–ê–¢–§–û–†–ú–ê–ú:")
        platform_stats = (
            df.groupby("platform")
            .agg({"driver_id": "nunique", "order_id": "count"})
            .reset_index()
        )

        platform_stats.columns = ["platform", "unique_drivers", "total_orders"]
        platform_stats["drivers_percentage"] = (
            platform_stats["unique_drivers"] / total_drivers * 100
        ).round(1)
        platform_stats["orders_per_driver"] = (
            platform_stats["total_orders"] / platform_stats["unique_drivers"]
        ).round(1)

        for _, row in platform_stats.iterrows():
            print(
                f"‚Ä¢ {row['platform']}: {row['unique_drivers']:,} –≤–æ–¥–∏—Ç–µ–ª–µ–π ({row['drivers_percentage']}%)"
            )

    # –ê–ù–ê–õ–ò–ó –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò
    print(f"\nüéØ –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –í–û–î–ò–¢–ï–õ–ï–ô:")
    print(
        f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {driver_activity['completion_rate'].mean():.1f}%"
    )
    print(f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–º–µ–Ω: {driver_activity['cancel_rate'].mean():.1f}%")

    # –¢–æ–ø –≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    top_efficient = driver_activity[driver_activity["total_orders"] >= 5].nlargest(
        5, "completion_rate"
    )
    print(f"\nüèÜ –¢–û–ü-5 –°–ê–ú–´–• –≠–§–§–ï–ö–¢–ò–í–ù–´–• –í–û–î–ò–¢–ï–õ–ï–ô (–æ—Ç 5+ –∑–∞–∫–∞–∑–æ–≤):")
    for i, (_, row) in enumerate(top_efficient.iterrows(), 1):
        print(
            f"{i}. ID {row['driver_id']}: {row['completion_rate']}% –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, "
            f"{row['total_orders']} –∑–∞–∫–∞–∑–æ–≤, —Ä–µ–π—Ç–∏–Ω–≥ {row['avg_rating']:.2f}"
        )

    # –ê–ù–ê–õ–ò–ó –ü–û –í–†–ï–ú–ï–ù–ò –†–ê–ë–û–¢–´
    print(f"\n‚è∞ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–†–ï–ú–ï–ù–ò –†–ê–ë–û–¢–´:")
    print(
        f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã: {driver_activity['work_duration_days'].mean():.1f} –¥–Ω–µ–π"
    )
    print(
        f"‚Ä¢ –ú–µ–¥–∏–∞–Ω–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {driver_activity['work_duration_days'].median():.1f} –¥–Ω–µ–π"
    )
    print(f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–∞–∫–∞–∑–æ–≤ –≤ –¥–µ–Ω—å: {driver_activity['orders_per_day'].mean():.2f}")

    # –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–ù–´–• –í–û–î–ò–¢–ï–õ–ï–ô
    problematic_drivers = driver_activity[
        (driver_activity["cancel_rate"] > 50) & (driver_activity["total_orders"] >= 5)
    ]

    print(f"\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ù–´–ï –í–û–î–ò–¢–ï–õ–ò (–æ—Ç–º–µ–Ω–∞ >50%, –æ—Ç 5+ –∑–∞–∫–∞–∑–æ–≤):")
    print(f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(problematic_drivers):,}")
    if len(problematic_drivers) > 0:
        avg_problem_rating = problematic_drivers["avg_rating"].mean()
        print(f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π: {avg_problem_rating:.2f}")

    # –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ù–û–í–´–• –í–û–î–ò–¢–ï–õ–ï–ô
    current_date = df["order_timestamp"].max()
    driver_activity["days_since_registration"] = (
        current_date - driver_activity["reg_date"]
    ).dt.days

    new_drivers = driver_activity[driver_activity["days_since_registration"] <= 30]
    print(f"\nüÜï –ù–û–í–´–ï –í–û–î–ò–¢–ï–õ–ò (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π):")
    print(f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(new_drivers):,}")
    if len(new_drivers) > 0:
        print(f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–∞–∫–∞–∑–æ–≤: {new_drivers['total_orders'].mean():.1f}")
        print(f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {new_drivers['avg_rating'].mean():.2f}")

    # –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò
    create_driver_visualizations(driver_activity, df, save_path)

    return {
        "driver_activity": driver_activity,
        "total_drivers": total_drivers,
        "total_orders": total_orders,
        "activity_segments": activity_segments,
        "platform_stats": platform_stats if "platform" in df.columns else None,
        "problematic_drivers": problematic_drivers,
        "new_drivers": new_drivers,
    }


def create_driver_visualizations(driver_activity, df, save_path):
    """
    –°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π
    """
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))

    # –ì—Ä–∞—Ñ–∏–∫ 1: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è
    ax1.hist(
        driver_activity["total_orders"],
        bins=50,
        alpha=0.7,
        color="skyblue",
        edgecolor="black",
    )
    ax1.set_xlabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è")
    ax1.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π")
    ax1.set_title(
        "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–∫–∞–∑–æ–≤", fontsize=14, fontweight="bold"
    )
    ax1.grid(True, alpha=0.3)
    ax1.set_yscale("log")  # –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏

    # –ì—Ä–∞—Ñ–∏–∫ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
    ax2.hist(
        driver_activity["avg_rating"].dropna(),
        bins=30,
        alpha=0.7,
        color="lightgreen",
        edgecolor="darkgreen",
    )
    ax2.axvline(
        driver_activity["avg_rating"].mean(),
        color="red",
        linestyle="--",
        label=f"–°—Ä–µ–¥–Ω–µ–µ: {driver_activity['avg_rating'].mean():.2f}",
    )
    ax2.axvline(
        driver_activity["avg_rating"].median(),
        color="blue",
        linestyle="--",
        label=f"–ú–µ–¥–∏–∞–Ω–∞: {driver_activity['avg_rating'].median():.2f}",
    )
    ax2.set_xlabel("–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –≤–æ–¥–∏—Ç–µ–ª—è")
    ax2.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π")
    ax2.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –≤–æ–¥–∏—Ç–µ–ª–µ–π", fontsize=14, fontweight="bold")
    ax2.legend()
    ax2.grid(True, alpha=0.3)

    # –ì—Ä–∞—Ñ–∏–∫ 3: –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
    ax3.hist(
        driver_activity["completion_rate"],
        bins=30,
        alpha=0.7,
        color="gold",
        edgecolor="darkorange",
    )
    ax3.axvline(
        driver_activity["completion_rate"].mean(),
        color="red",
        linestyle="--",
        label=f"–°—Ä–µ–¥–Ω–µ–µ: {driver_activity['completion_rate'].mean():.1f}%",
    )
    ax3.set_xlabel("–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (%)")
    ax3.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π")
    ax3.set_title(
        "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤", fontsize=14, fontweight="bold"
    )
    ax3.legend()
    ax3.grid(True, alpha=0.3)

    # –ì—Ä–∞—Ñ–∏–∫ 4: –°–≤—è–∑—å —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    sample_size = min(1000, len(driver_activity))
    sample_data = driver_activity.sample(sample_size, random_state=42)

    scatter = ax4.scatter(
        sample_data["completion_rate"],
        sample_data["avg_rating"],
        c=sample_data["total_orders"],
        cmap="viridis",
        alpha=0.6,
        s=50,
    )
    ax4.set_xlabel("–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ (%)")
    ax4.set_ylabel("–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥")
    ax4.set_title(
        "–°–≤—è–∑—å —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π\n(—Ü–≤–µ—Ç = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤)",
        fontsize=14,
        fontweight="bold",
    )
    ax4.grid(True, alpha=0.3)

    # –¶–≤–µ—Ç–æ–≤–∞—è —à–∫–∞–ª–∞ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤
    plt.colorbar(scatter, ax=ax4, label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤")

    plt.tight_layout()
    plt.savefig(f"{save_path}18_driver_statistics.png", dpi=300, bbox_inches="tight")
    plt.show()

    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò
    # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    fig, ax = plt.subplots(figsize=(10, 8))

    activity_segments = {
        "–í—ã—Å–æ–∫–∞—è (>50)": len(driver_activity[driver_activity["total_orders"] > 50]),
        "–°—Ä–µ–¥–Ω—è—è (11-50)": len(
            driver_activity[
                (driver_activity["total_orders"] >= 11)
                & (driver_activity["total_orders"] <= 50)
            ]
        ),
        "–ù–∏–∑–∫–∞—è (2-10)": len(
            driver_activity[
                (driver_activity["total_orders"] >= 2)
                & (driver_activity["total_orders"] <= 10)
            ]
        ),
        "–ï–¥–∏–Ω–∏—á–Ω–∞—è (1)": len(driver_activity[driver_activity["total_orders"] == 1]),
    }

    colors = ["#ff9999", "#66b3ff", "#99ff99", "#ffcc99"]
    wedges, texts, autotexts = ax.pie(
        activity_segments.values(),
        labels=activity_segments.keys(),
        autopct="%1.1f%%",
        colors=colors,
        startangle=90,
    )

    for autotext in autotexts:
        autotext.set_color("white")
        autotext.set_fontweight("bold")

    ax.set_title("–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", fontsize=16, fontweight="bold")
    plt.savefig(f"{save_path}19_driver_segments.png", dpi=300, bbox_inches="tight")
    plt.show()


def print_driver_summary_report(analysis_results):
    """
    –ü–µ—á–∞—Ç–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º
    """
    print("\n" + "=" * 80)
    print("üìã –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢ –ü–û –í–û–î–ò–¢–ï–õ–Ø–ú")
    print("=" * 80)

    stats = analysis_results["driver_activity"].describe()

    print(f"\nüéØ –ö–õ–Æ–ß–ï–í–´–ï –ú–ï–¢–†–ò–ö–ò:")
    print(f"‚Ä¢ –í—Å–µ–≥–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {analysis_results['total_drivers']:,}")
    print(f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {analysis_results['total_orders']:,}")
    print(
        f"‚Ä¢ –ó–∞–∫–∞–∑–æ–≤ –Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è: {analysis_results['total_orders'] / analysis_results['total_drivers']:.1f}"
    )
    print(
        f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {analysis_results['driver_activity']['avg_rating'].mean():.2f}"
    )
    print(
        f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {analysis_results['driver_activity']['completion_rate'].mean():.1f}%"
    )

    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ë–ò–ó–ù–ï–°–ê:")

    # –ê–Ω–∞–ª–∏–∑ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    high_activity_drivers = len(
        analysis_results["driver_activity"][
            analysis_results["driver_activity"]["total_orders"] > 50
        ]
    )
    high_activity_percentage = (
        high_activity_drivers / analysis_results["total_drivers"]
    ) * 100

    if high_activity_percentage < 20:
        print("‚Ä¢ ‚ùó –ú–∞–ª–æ –≤—ã—Å–æ–∫–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π - —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –º–æ—Ç–∏–≤–∞—Ü–∏–∏")

    if analysis_results["driver_activity"]["completion_rate"].mean() < 80:
        print("‚Ä¢ ‚ùó –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è - —É–ª—É—á—à–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –º–∞—Ç—á–∏–Ω–≥–∞")

    if analysis_results["driver_activity"]["avg_rating"].mean() < 4.5:
        print("‚Ä¢ ‚ùó –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∏–∑–∫–∏–π - —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–∞")

    if (
        len(analysis_results["problematic_drivers"])
        > analysis_results["total_drivers"] * 0.1
    ):
        print("‚Ä¢ ‚ùó –ú–Ω–æ–≥–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π - –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞")

    print("‚Ä¢ ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–æ–ø-–≤–æ–¥–∏—Ç–µ–ª–µ–π")
    print("‚Ä¢ ‚úÖ –í–Ω–µ–¥—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")


# –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
if __name__ == "__main__":
    df = pd.read_csv("./train.csv")
    driver_analysis = analyze_driver_statistics(df)
    print_driver_summary_report(driver_analysis)
