import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import chi2_contingency, pointbiserialr


def analyze_correlation_low_bid_peak_hours(df, save_path="visualizations/"):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –º–µ–∂–¥—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–º–∏ –±–∏–¥–∞–º–∏ –Ω–∏–∂–µ –±–∞–∑–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ —á–∞—Å–∞–º–∏ –ø–∏–∫
    """
    import os

    os.makedirs(save_path, exist_ok=True)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    df["order_timestamp"] = pd.to_datetime(df["order_timestamp"])
    df["order_hour"] = df["order_timestamp"].dt.hour

    print("=" * 70)
    print("–ö–û–†–†–ï–õ–Ø–¶–ò–Ø: –û–¢–ö–õ–û–ù–ï–ù–ù–´–ï –ë–ò–î–´ –ù–ò–ñ–ï –°–¢–ê–†–¢–û–í–û–ô –¶–ï–ù–´ –ò –ß–ê–°–´ –ü–ò–ö")
    print("=" * 70)

    # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å—ã –ø–∏–∫
    hourly_orders = df.groupby("order_hour").size()
    peak_threshold = hourly_orders.quantile(0.75)  # –í–µ—Ä—Ö–Ω–∏–µ 25% –∫–∞–∫ —á–∞—Å—ã –ø–∏–∫
    df["is_peak_hour"] = df["order_hour"].isin(
        hourly_orders[hourly_orders >= peak_threshold].index
    )

    # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ —Å –Ω–∏–∑–∫–∏–º –±–∏–¥–æ–º)
    df["is_low_bid_cancel"] = (df["is_done"] == "cancel") & (
        df["price_bid_local"] <= df["price_start_local"]
    )

    # 3. –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_orders = len(df)
    peak_hour_orders = len(df[df["is_peak_hour"]])
    low_bid_cancel_orders = len(df[df["is_low_bid_cancel"]])

    print("\nüìä –ë–ê–ó–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders:,}")
    print(
        f"‚Ä¢ –ó–∞–∫–∞–∑–æ–≤ –≤ —á–∞—Å—ã –ø–∏–∫: {peak_hour_orders:,} ({peak_hour_orders / total_orders * 100:.1f}%)"
    )
    print(
        f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å –Ω–∏–∑–∫–∏–º –±–∏–¥–æ–º: {low_bid_cancel_orders:,} ({low_bid_cancel_orders / total_orders * 100:.1f}%)"
    )

    # 4. –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —á–∞—Å–∞–º
    hourly_analysis = (
        df.groupby("order_hour")
        .agg({"order_id": "count", "is_low_bid_cancel": "sum", "is_peak_hour": "first"})
        .reset_index()
    )

    hourly_analysis.columns = ["hour", "total_orders", "low_bid_cancels", "is_peak"]
    hourly_analysis["cancel_rate"] = (
        hourly_analysis["low_bid_cancels"] / hourly_analysis["total_orders"] * 100
    ).round(2)
    hourly_analysis["is_peak"] = hourly_analysis["is_peak"].astype(bool)

    # 5. –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã
    print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:")

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç–∏
    contingency_table = pd.crosstab(df["is_peak_hour"], df["is_low_bid_cancel"])

    print("–¢–∞–±–ª–∏—Ü–∞ —Å–æ–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç–∏:")
    print(contingency_table)

    # –¢–µ—Å—Ç —Ö–∏-–∫–≤–∞–¥—Ä–∞—Ç
    chi2, p_value, dof, expected = chi2_contingency(contingency_table)
    print("\n‚Ä¢ –¢–µ—Å—Ç —Ö–∏-–∫–≤–∞–¥—Ä–∞—Ç:")
    print(f"  Chi2 = {chi2:.4f}")
    print(f"  p-value = {p_value:.4f}")
    print(f"  –°—Ç–µ–ø–µ–Ω–∏ —Å–≤–æ–±–æ–¥—ã = {dof}")

    # –¢–æ—á–µ—á–Ω–æ-–±–∏—Å–µ—Ä–∏–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
    if len(df[df["is_low_bid_cancel"]]) > 0:
        correlation, p_corr = pointbiserialr(
            df["is_peak_hour"].astype(int), df["is_low_bid_cancel"].astype(int)
        )
        print("\n‚Ä¢ –¢–æ—á–µ—á–Ω–æ-–±–∏—Å–µ—Ä–∏–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è:")
        print(f"  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ = {correlation:.4f}")
        print(f"  p-value = {p_corr:.4f}")

    # 6. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ rates
    peak_low_bid_rate = (
        len(df[(df["is_peak_hour"]) & (df["is_low_bid_cancel"])])
        / len(df[df["is_peak_hour"]])
        * 100
    )
    off_peak_low_bid_rate = (
        len(df[(~df["is_peak_hour"]) & (df["is_low_bid_cancel"])])
        / len(df[~df["is_peak_hour"]])
        * 100
    )

    print("\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–¶–ï–ù–¢–û–í:")
    print(f"‚Ä¢ –í —á–∞—Å—ã –ø–∏–∫: {peak_low_bid_rate:.2f}% –∑–∞–∫–∞–∑–æ–≤ - –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –Ω–∏–∑–∫–∏–µ –±–∏–¥—ã")
    print(
        f"‚Ä¢ –í–Ω–µ —á–∞—Å–æ–≤ –ø–∏–∫: {off_peak_low_bid_rate:.2f}% –∑–∞–∫–∞–∑–æ–≤ - –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –Ω–∏–∑–∫–∏–µ –±–∏–¥—ã"
    )
    print(f"‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞: {abs(peak_low_bid_rate - off_peak_low_bid_rate):.2f}%")

    # 7. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —á–∞—Å–∞–º
    peak_hours = hourly_analysis[hourly_analysis["is_peak"]]
    off_peak_hours = hourly_analysis[~hourly_analysis["is_peak"]]

    print("\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û –ß–ê–°–ê–ú:")
    print(f"‚Ä¢ –ß–∞—Å—ã –ø–∏–∫: {list(peak_hours['hour'])}")
    print(
        f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–±–ª–µ–º –≤ —á–∞—Å—ã –ø–∏–∫: {peak_hours['cancel_rate'].mean():.2f}%"
    )
    print(
        f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–±–ª–µ–º –≤–Ω–µ —á–∞—Å–æ–≤ –ø–∏–∫: {off_peak_hours['cancel_rate'].mean():.2f}%"
    )

    # –¢–æ–ø —á–∞—Å–æ–≤ –ø–æ –ø—Ä–æ–±–ª–µ–º–∞–º
    top_problem_hours = hourly_analysis.nlargest(5, "cancel_rate")
    print("\nüèÜ –¢–û–ü-5 –ß–ê–°–û–í –ü–û –ü–†–û–¶–ï–ù–¢–£ –û–¢–ö–õ–û–ù–ï–ù–ù–´–• –ù–ò–ó–ö–ò–• –ë–ò–î–û–í:")
    for _, row in top_problem_hours.iterrows():
        peak_status = "–ü–ò–ö" if row["is_peak"] else "–Ω–µ –ø–∏–∫"
        print(
            f"‚Ä¢ {int(row['hour']):02d}:00 - {row['cancel_rate']}% –ø—Ä–æ–±–ª–µ–º ({peak_status})"
        )

    # 8. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    create_correlation_visualizations(df, hourly_analysis, save_path)

    # 9. –í—ã–≤–æ–¥—ã
    print("\nüí° –í–´–í–û–î–´ –ò –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–Ø:")

    if p_value < 0.05:  # type: ignore
        print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–∞—è —Å–≤—è–∑—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ (p < 0.05)")
        if peak_low_bid_rate > off_peak_low_bid_rate:
            print(
                f"‚Ä¢ –í —á–∞—Å—ã –ø–∏–∫ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –Ω–∏–∑–∫–∏—Ö –±–∏–¥–æ–≤ –í–´–®–ï –Ω–∞ {peak_low_bid_rate - off_peak_low_bid_rate:.2f}%"
            )
            print("‚Ä¢ –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è, —Å–ø–µ—à–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π")
        else:
            print(
                f"‚Ä¢ –í —á–∞—Å—ã –ø–∏–∫ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –Ω–∏–∑–∫–∏—Ö –±–∏–¥–æ–≤ –ù–ò–ñ–ï –Ω–∞ {off_peak_low_bid_rate - peak_low_bid_rate:.2f}%"
            )
            print(
                "‚Ä¢ –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –±–æ–ª—å—à–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω, –ª—É—á—à–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–ø—Ä–æ—Å–∞/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
            )
    else:
        print("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–æ–π —Å–≤—è–∑–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ (p ‚â• 0.05)")
        print("‚Ä¢ –ß–∞—Å—ã –ø–∏–∫ –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –Ω–∏–∑–∫–∏—Ö –±–∏–¥–æ–≤")

    if abs(correlation) > 0.1 and p_corr < 0.05:  # type: ignore
        strength = (
            "—Å–ª–∞–±–∞—è"
            if abs(correlation) < 0.3  # type: ignore
            else "—É–º–µ—Ä–µ–Ω–Ω–∞—è"
            if abs(correlation) < 0.5  # type: ignore
            else "—Å–∏–ª—å–Ω–∞—è"
        )
        direction = "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è" if correlation > 0 else "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è"  # type: ignore
        print(
            f"‚Ä¢ {strength.capitalize()} {direction} –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: r = {correlation:.3f}"
        )

    return {
        "contingency_table": contingency_table,
        "chi2_test": (chi2, p_value, dof),
        "correlation": (correlation, p_corr) if "correlation" in locals() else None,
        "hourly_analysis": hourly_analysis,
        "peak_low_bid_rate": peak_low_bid_rate,
        "off_peak_low_bid_rate": off_peak_low_bid_rate,
    }


def create_correlation_visualizations(df, hourly_analysis, save_path):
    """
    –°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
    """
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))

    # –ì—Ä–∞—Ñ–∏–∫ 1: –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–±–ª–µ–º –ø–æ —á–∞—Å–∞–º —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –ø–∏–∫–æ–≤—ã—Ö —á–∞—Å–æ–≤
    colors = ["red" if peak else "blue" for peak in hourly_analysis["is_peak"]]
    ax1.bar(
        hourly_analysis["hour"],
        hourly_analysis["cancel_rate"],
        color=colors,
        alpha=0.7,
        edgecolor="black",
    )
    ax1.set_xlabel("–ß–∞—Å –¥–Ω—è")
    ax1.set_ylabel("–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –Ω–∏–∑–∫–∏—Ö –±–∏–¥–æ–≤ (%)")
    ax1.set_title(
        "–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –Ω–∏–∑–∫–∏—Ö –±–∏–¥–æ–≤ –ø–æ —á–∞—Å–∞–º\n(–∫—Ä–∞—Å–Ω—ã–π - —á–∞—Å—ã –ø–∏–∫)",
        fontsize=14,
        fontweight="bold",
    )
    ax1.grid(True, alpha=0.3)

    # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É
    from matplotlib.patches import Patch

    legend_elements = [
        Patch(facecolor="red", alpha=0.7, label="–ß–∞—Å—ã –ø–∏–∫"),
        Patch(facecolor="blue", alpha=0.7, label="–í–Ω–µ —á–∞—Å–æ–≤ –ø–∏–∫"),
    ]
    ax1.legend(handles=legend_elements)

    # –ì—Ä–∞—Ñ–∏–∫ 2: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤ –ø–∏–∫–æ–≤—ã–µ –∏ –Ω–µ–ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã
    peak_data = hourly_analysis[hourly_analysis["is_peak"]]["cancel_rate"]
    off_peak_data = hourly_analysis[~hourly_analysis["is_peak"]]["cancel_rate"]

    box_data = [peak_data, off_peak_data]
    ax2.boxplot(box_data, labels=["–ß–∞—Å—ã –ø–∏–∫", "–í–Ω–µ —á–∞—Å–æ–≤ –ø–∏–∫"])
    ax2.set_ylabel("–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –Ω–∏–∑–∫–∏—Ö –±–∏–¥–æ–≤ (%)")
    ax2.set_title(
        "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–æ–±–ª–µ–º", fontsize=14, fontweight="bold"
    )
    ax2.grid(True, alpha=0.3)

    # –ì—Ä–∞—Ñ–∏–∫ 3: –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ - –∑–∞–∫–∞–∑—ã vs –ø—Ä–æ–±–ª–µ–º—ã
    heatmap_data = (
        df.groupby(["order_hour", "is_low_bid_cancel"]).size().unstack(fill_value=0)
    )
    heatmap_data_percent = heatmap_data.div(heatmap_data.sum(axis=1), axis=0) * 100

    im = ax3.imshow(heatmap_data_percent, cmap="RdYlBu_r", aspect="auto")
    ax3.set_xlabel("–¢–∏–ø –∑–∞–∫–∞–∑–∞")
    ax3.set_ylabel("–ß–∞—Å –¥–Ω—è")
    ax3.set_title(
        "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —á–∞—Å–∞–º (%)\n", fontsize=14, fontweight="bold"
    )
    ax3.set_xticks([0, 1])
    ax3.set_xticklabels(["–û–±—ã—á–Ω—ã–µ", "–ù–∏–∑–∫–∏–π –±–∏–¥+–æ—Ç–º–µ–Ω–∞"])
    ax3.set_yticks(range(24))
    ax3.set_yticklabels([f"{h:02d}" for h in range(24)])

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —è—á–µ–π–∫–∏
    for i in range(heatmap_data_percent.shape[0]):
        for j in range(heatmap_data_percent.shape[1]):
            ax3.text(
                j,
                i,
                f"{heatmap_data_percent.iloc[i, j]:.1f}%",
                ha="center",
                va="center",
                fontweight="bold",
                color="white" if heatmap_data_percent.iloc[i, j] > 50 else "black",
            )

    plt.colorbar(im, ax=ax3, fraction=0.046, pad=0.04)

    # –ì—Ä–∞—Ñ–∏–∫ 4: Scatter plot - –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å vs –ø—Ä–æ–±–ª–µ–º—ã
    ax4.scatter(
        hourly_analysis["total_orders"],
        hourly_analysis["cancel_rate"],
        c=hourly_analysis["is_peak"].astype(int),
        cmap="RdYlBu",
        s=100,
        alpha=0.7,
    )
    ax4.set_xlabel("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤")
    ax4.set_ylabel("–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –Ω–∏–∑–∫–∏—Ö –±–∏–¥–æ–≤ (%)")
    ax4.set_title(
        "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º –æ—Ç –æ–±—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", fontsize=14, fontweight="bold"
    )
    ax4.grid(True, alpha=0.3)

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –≤—ã–±—Ä–æ—Å–æ–≤
    for _, row in hourly_analysis.nlargest(3, "cancel_rate").iterrows():
        ax4.annotate(
            f"{int(row['hour']):02d}:00",
            (row["total_orders"], row["cancel_rate"]),
            xytext=(5, 5),
            textcoords="offset points",
        )

    plt.tight_layout()
    plt.savefig(f"{save_path}14_correlation_analysis.png", dpi=300, bbox_inches="tight")
    plt.show()

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
    if len(df) > 1000:
        fig, ax = plt.subplots(figsize=(12, 6))

        # –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –ø–æ —á–∞—Å–∞–º
        hourly_trend = (
            df.groupby("order_hour")
            .agg({"is_low_bid_cancel": "mean", "order_id": "count"})
            .reset_index()
        )

        ax.plot(
            hourly_trend["order_hour"],
            hourly_trend["is_low_bid_cancel"] * 100,
            marker="o",
            linewidth=2,
            color="red",
            label="–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–±–ª–µ–º",
        )
        ax.set_xlabel("–ß–∞—Å –¥–Ω—è")
        ax.set_ylabel("–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –Ω–∏–∑–∫–∏—Ö –±–∏–¥–æ–≤ (%)", color="red")
        ax.tick_params(axis="y", labelcolor="red")
        ax.grid(True, alpha=0.3)

        # –í—Ç–æ—Ä–æ–π –≥—Ä–∞—Ñ–∏–∫ - –æ–±—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        ax2 = ax.twinx()
        ax2.bar(
            hourly_trend["order_hour"],
            hourly_trend["order_id"],
            alpha=0.3,
            color="blue",
            label="–û–±—â–µ–µ –∫–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤",
        )
        ax2.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤", color="blue")
        ax2.tick_params(axis="y", labelcolor="blue")

        ax.set_title(
            "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–æ–±–ª–µ–º –∏ –æ–±—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º",
            fontsize=14,
            fontweight="bold",
        )

        plt.tight_layout()
        plt.savefig(f"{save_path}15_trend_analysis.png", dpi=300, bbox_inches="tight")
        plt.show()


# –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
if __name__ == "__main__":
    df = pd.read_csv("./train.csv")
    correlation_results = analyze_correlation_low_bid_peak_hours(df)
