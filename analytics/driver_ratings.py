import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns


def calculate_rating_stats(df):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –º–µ–¥–∏–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    if "driver_rating" not in df.columns:
        print("‚ùå –ö–æ–ª–æ–Ω–∫–∞ 'driver_rating' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")
        return None

    # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    ratings = df["driver_rating"].dropna()

    if len(ratings) == 0:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return None

    # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    mean_rating = ratings.mean()
    median_rating = ratings.median()

    # –ú–µ–¥–∏–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (Median Absolute Deviation - MAD)
    mad = np.median(np.abs(ratings - median_rating))

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    min_rating = ratings.min()
    max_rating = ratings.max()
    std_rating = ratings.std()

    print("=" * 50)
    print("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–ô–¢–ò–ù–ì–û–í –í–û–î–ò–¢–ï–õ–ï–ô")
    print("=" * 50)
    print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: {len(ratings):,}")
    print(f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {mean_rating:.4f}")
    print(f"üìà –ú–µ–¥–∏–∞–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {median_rating:.4f}")
    print(f"üéØ –ú–µ–¥–∏–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (MAD): {mad:.4f}")
    print(f"üìâ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {std_rating:.4f}")
    print(f"üîΩ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {min_rating:.4f}")
    print(f"üîº –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {max_rating:.4f}")
    print(f"üìê –î–∏–∞–ø–∞–∑–æ–Ω: {max_rating - min_rating:.4f}")

    # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    print("\nüìã –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –†–ï–ô–¢–ò–ù–ì–û–í:")
    print(f"‚Ä¢ 25-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å: {ratings.quantile(0.25):.4f}")
    print(f"‚Ä¢ 75-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å: {ratings.quantile(0.75):.4f}")
    print(
        f"‚Ä¢ IQR (–º–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–∞—Ö): {ratings.quantile(0.75) - ratings.quantile(0.25):.4f}"
    )

    # –ü—Ä–æ—Ü–µ–Ω—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    perfect_ratings = len(ratings[ratings == 5.0])
    perfect_percentage = (perfect_ratings / len(ratings)) * 100
    print(
        f"‚Ä¢ –í–æ–¥–∏—Ç–µ–ª–µ–π —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º 5.0: {perfect_ratings:,} ({perfect_percentage:.2f}%)"
    )

    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ MAD —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º
    print("\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –ú–ï–† –†–ê–°–°–ï–Ø–ù–ò–Ø:")
    print(f"‚Ä¢ MAD / STD: {mad / std_rating:.4f}")
    print("‚Ä¢ MAD –±–æ–ª–µ–µ —É—Å—Ç–æ–π—á–∏–≤ –∫ –≤—ã–±—Ä–æ—Å–∞–º, —á–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ")

    return {
        "mean": mean_rating,
        "median": median_rating,
        "mad": mad,
        "std": std_rating,
        "min": min_rating,
        "max": max_rating,
        "count": len(ratings),
        "perfect_ratings_count": perfect_ratings,
        "perfect_ratings_percentage": perfect_percentage,
    }


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏
def compare_rating_groups(df, group_column=None):
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏
    """
    if group_column and group_column not in df.columns:
        print(f"‚ùå –ö–æ–ª–æ–Ω–∫–∞ '{group_column}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    print("\n" + "=" * 60)
    print("–°–†–ê–í–ù–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö –†–ï–ô–¢–ò–ù–ì–û–í –ü–û –ì–†–£–ü–ü–ê–ú")
    print("=" * 60)

    if group_column:
        groups = df[group_column].unique()
        for group in groups:
            group_data = df[df[group_column] == group]
            group_ratings = group_data["driver_rating"].dropna()

            if len(group_ratings) > 0:
                print(f"\nüè∑Ô∏è  –ì—Ä—É–ø–ø–∞: {group}")
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(group_ratings):,}")
                print(f"   –°—Ä–µ–¥–Ω–∏–π: {group_ratings.mean():.4f}")
                print(f"   –ú–µ–¥–∏–∞–Ω–∞: {group_ratings.median():.4f}")
                print(
                    f"   MAD: {np.median(np.abs(group_ratings - group_ratings.median())):.4f}"
                )
    else:
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å—É –∑–∞–∫–∞–∑–∞
        if "is_done" in df.columns:
            statuses = df["is_done"].unique()
            for status in statuses:
                status_data = df[df["is_done"] == status]
                status_ratings = status_data["driver_rating"].dropna()

                if len(status_ratings) > 0:
                    print(f"\nüìä –°—Ç–∞—Ç—É—Å: {status}")
                    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(status_ratings):,}")
                    print(f"   –°—Ä–µ–¥–Ω–∏–π: {status_ratings.mean():.4f}")
                    print(f"   –ú–µ–¥–∏–∞–Ω–∞: {status_ratings.median():.4f}")
                    print(
                        f"   MAD: {np.median(np.abs(status_ratings - status_ratings.median())):.4f}"
                    )


def plot_rating_distribution(df):
    """
    –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
    """
    ratings = df["driver_rating"].dropna()

    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 10))

    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
    ax1.hist(ratings, bins=30, alpha=0.7, color="skyblue", edgecolor="black")
    ax1.axvline(
        ratings.mean(),
        color="red",
        linestyle="--",
        linewidth=2,
        label=f"–°—Ä–µ–¥–Ω–µ–µ: {ratings.mean():.3f}",
    )
    ax1.axvline(
        ratings.median(),
        color="green",
        linestyle="--",
        linewidth=2,
        label=f"–ú–µ–¥–∏–∞–Ω–∞: {ratings.median():.3f}",
    )
    ax1.set_xlabel("–†–µ–π—Ç–∏–Ω–≥")
    ax1.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    ax1.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –≤–æ–¥–∏—Ç–µ–ª–µ–π")
    ax1.legend()
    ax1.grid(True, alpha=0.3)

    # Box plot
    ax2.boxplot(ratings, vert=False)
    ax2.set_xlabel("–†–µ–π—Ç–∏–Ω–≥")
    ax2.set_title("Box plot —Ä–µ–π—Ç–∏–Ω–≥–æ–≤")
    ax2.grid(True, alpha=0.3)

    # –ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    sns.kdeplot(ratings, ax=ax3, fill=True, color="lightcoral")
    ax3.axvline(
        ratings.mean(),
        color="red",
        linestyle="--",
        linewidth=2,
        label=f"–°—Ä–µ–¥–Ω–µ–µ: {ratings.mean():.3f}",
    )
    ax3.axvline(
        ratings.median(),
        color="green",
        linestyle="--",
        linewidth=2,
        label=f"–ú–µ–¥–∏–∞–Ω–∞: {ratings.median():.3f}",
    )
    ax3.set_xlabel("–†–µ–π—Ç–∏–Ω–≥")
    ax3.set_ylabel("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å")
    ax3.set_title("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤")
    ax3.legend()
    ax3.grid(True, alpha=0.3)

    # QQ plot –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏
    from scipy import stats

    stats.probplot(ratings, dist="norm", plot=ax4)
    ax4.set_title("Q-Q plot (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏)")
    ax4.grid(True, alpha=0.3)

    plt.tight_layout()
    plt.savefig("rating_distribution_analysis.png", dpi=300, bbox_inches="tight")
    plt.show()


# –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
if __name__ == "__main__":
    df = pd.read_csv("./train.csv")
    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    rating_stats = calculate_rating_stats(df)

    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –≥—Ä—É–ø–ø–∞–º
    compare_rating_groups(
        df, group_column="platform"
    )  # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –¥—Ä—É–≥—É—é –∫–æ–ª–æ–Ω–∫—É
    compare_rating_groups(df)  # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å—É –∑–∞–∫–∞–∑–∞

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    plot_rating_distribution(df)

    # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "=" * 50)
    print("–ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 50)

    if rating_stats:
        mad_std_ratio = rating_stats["mad"] / rating_stats["std"]

        print(f"üìà –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {rating_stats['mean']:.4f}")
        print(f"üéØ –ú–µ–¥–∏–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (MAD): {rating_stats['mad']:.4f}")

        if rating_stats["mad"] < 0.1:
            print("‚Ä¢ MAD –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π ‚Üí —Ä–µ–π—Ç–∏–Ω–≥–∏ –æ—á–µ–Ω—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ")
        elif rating_stats["mad"] < 0.3:
            print("‚Ä¢ MAD –Ω–µ–±–æ–ª—å—à–æ–π ‚Üí —Ä–µ–π—Ç–∏–Ω–≥–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ")
        else:
            print("‚Ä¢ MAD –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π ‚Üí –µ—Å—Ç—å —Ä–∞–∑–±—Ä–æ—Å –≤ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö")

        if mad_std_ratio < 0.8:
            print("‚Ä¢ MAD –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—å—à–µ STD ‚Üí –≤–æ–∑–º–æ–∂–Ω—ã –≤—ã–±—Ä–æ—Å—ã")
        elif mad_std_ratio > 1.2:
            print("‚Ä¢ MAD –±–æ–ª—å—à–µ STD ‚Üí –Ω–µ–æ–±—ã—á–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
        else:
            print("‚Ä¢ MAD –∏ STD –±–ª–∏–∑–∫–∏ ‚Üí —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–ª–∏–∑–∫–æ –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É")

        if rating_stats["perfect_ratings_percentage"] > 50:
            print(
                f"‚Ä¢ –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ ({rating_stats['perfect_ratings_percentage']:.1f}%) ‚Üí –≤–æ–∑–º–æ–∂–µ–Ω bias –≤ –æ—Ü–µ–Ω–∫–∞—Ö"
            )
