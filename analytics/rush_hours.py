import pandas as pd
import matplotlib.pyplot as plt


def analyze_peak_hours(df, save_path="visualizations/"):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —á–∞—Å—ã –ø–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö
    """
    import os

    os.makedirs(save_path, exist_ok=True)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    df["order_timestamp"] = pd.to_datetime(df["order_timestamp"])
    df["tender_timestamp"] = pd.to_datetime(df["tender_timestamp"])

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    df["order_hour"] = df["order_timestamp"].dt.hour
    df["order_dayofweek"] = df[
        "order_timestamp"
    ].dt.dayofweek  # 0=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
    df["order_date"] = df["order_timestamp"].dt.date
    df["order_day_name"] = df["order_timestamp"].dt.day_name()

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    day_names_ru = {
        "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
        "Wednesday": "–°—Ä–µ–¥–∞",
        "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
        "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
        "Saturday": "–°—É–±–±–æ—Ç–∞",
        "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    }
    df["order_day_name_ru"] = df["order_day_name"].map(day_names_ru)

    print("=" * 60)
    print("–ê–ù–ê–õ–ò–ó –ß–ê–°–û–í –ü–ò–ö")
    print("=" * 60)

    # 1. –ê–Ω–∞–ª–∏–∑ –ø–æ —á–∞—Å–∞–º
    hourly_stats = (
        df.groupby("order_hour")
        .agg(
            {
                "order_id": "count",
                "is_done": lambda x: (x == "done").sum(),
                "driver_id": "nunique",
            }
        )
        .reset_index()
    )

    hourly_stats.columns = [
        "hour",
        "total_orders",
        "completed_orders",
        "unique_drivers",
    ]
    hourly_stats["completion_rate"] = (
        hourly_stats["completed_orders"] / hourly_stats["total_orders"] * 100
    ).round(2)
    hourly_stats["orders_per_driver"] = (
        hourly_stats["total_orders"] / hourly_stats["unique_drivers"]
    ).round(2)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º total_orders –≤ int –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    hourly_stats["total_orders_int"] = hourly_stats["total_orders"].astype(int)
    hourly_stats["completed_orders_int"] = hourly_stats["completed_orders"].astype(int)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å—ã –ø–∏–∫
    peak_hours = hourly_stats.nlargest(3, "total_orders")
    low_hours = hourly_stats.nsmallest(3, "total_orders")

    print("\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {len(df):,}")
    print(f"‚Ä¢ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {df['order_date'].min()} - {df['order_date'].max()}")
    print(f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–Ω–µ–π: {df['order_date'].nunique()}")

    print("\nüèÜ –¢–û–ü-3 –ß–ê–°–ê –ü–ò–ö:")
    for _, row in peak_hours.iterrows():
        print(
            f"‚Ä¢ {int(row['hour']):02d}:00 - {int(row['total_orders']):,} –∑–∞–∫–∞–∑–æ–≤ "
            f"({row['completion_rate']}% –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)"
        )

    print("\nüìâ –¢–û–ü-3 –ù–ê–ò–ú–ï–ù–ï–ï –ê–ö–¢–ò–í–ù–´–• –ß–ê–°–ê:")
    for _, row in low_hours.iterrows():
        print(
            f"‚Ä¢ {int(row['hour']):02d}:00 - {int(row['total_orders']):,} –∑–∞–∫–∞–∑–æ–≤ "
            f"({row['completion_rate']}% –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)"
        )

    # 2. –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    daily_stats = (
        df.groupby(["order_dayofweek", "order_day_name_ru"])
        .agg(
            {
                "order_id": "count",
                "is_done": lambda x: (x == "done").sum(),
                "driver_id": "nunique",
            }
        )
        .reset_index()
    )

    daily_stats.columns = [
        "dayofweek",
        "day_name",
        "total_orders",
        "completed_orders",
        "unique_drivers",
    ]
    daily_stats["completion_rate"] = (
        daily_stats["completed_orders"] / daily_stats["total_orders"] * 100
    ).round(2)
    daily_stats = daily_stats.sort_values("dayofweek")

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    daily_stats["total_orders_int"] = daily_stats["total_orders"].astype(int)

    peak_day = daily_stats.loc[daily_stats["total_orders"].idxmax()]
    low_day = daily_stats.loc[daily_stats["total_orders"].idxmin()]

    print("\nüìÖ –ê–ù–ê–õ–ò–ó –ü–û –î–ù–Ø–ú –ù–ï–î–ï–õ–ò:")
    print(
        f"‚Ä¢ –°–∞–º—ã–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –¥–µ–Ω—å: {peak_day['day_name']} - {int(peak_day['total_orders']):,} –∑–∞–∫–∞–∑–æ–≤"
    )
    print(
        f"‚Ä¢ –°–∞–º—ã–π —Å–ø–æ–∫–æ–π–Ω—ã–π –¥–µ–Ω—å: {low_day['day_name']} - {int(low_day['total_orders']):,} –∑–∞–∫–∞–∑–æ–≤"
    )

    # 3. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–∞—Å–æ–≤ –ø–∏–∫
    print("\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ß–ê–°–û–í –ü–ò–ö:")
    for hour in peak_hours["hour"]:
        hour_data = df[df["order_hour"] == hour]
        hour_cancel_rate = round(
            (len(hour_data[hour_data["is_done"] == "cancel"]) / len(hour_data) * 100), 2
        )

        print(f"\n‚è∞ –ß–∞—Å {int(hour):02d}:00:")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {len(hour_data):,}")
        print(f"  ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–º–µ–Ω: {hour_cancel_rate}%")
        print(f"  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π: {hour_data['driver_id'].nunique()}")
        if "price_bid_local" in df.columns:
            avg_bid = hour_data["price_bid_local"].mean()
            print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∏–¥: {avg_bid:.0f}")

    # 4. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    create_peak_hours_visualizations(df, hourly_stats, daily_stats, save_path)

    # 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print(
        f"‚Ä¢ –ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã: {', '.join([f'{int(h):02d}:00' for h in peak_hours['hour']])}"
    )
    print("‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ —ç—Ç–∏ —á–∞—Å—ã")
    print(
        f"‚Ä¢ –ù–∞–∏–º–µ–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —á–∞—Å—ã: {', '.join([f'{int(h):02d}:00' for h in low_hours['hour']])}"
    )

    return {
        "hourly_stats": hourly_stats,
        "daily_stats": daily_stats,
        "peak_hours": peak_hours,
        "low_hours": low_hours,
    }


def create_peak_hours_visualizations(df, hourly_stats, daily_stats, save_path):
    """
    –°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Å–æ–≤ –ø–∏–∫
    """
    # 1. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —á–∞—Å–∞–º
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))

    # –ì—Ä–∞—Ñ–∏–∫ 1: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —á–∞—Å–∞–º
    ax1.bar(
        hourly_stats["hour"],
        hourly_stats["total_orders"],
        color="lightcoral",
        alpha=0.7,
        edgecolor="darkred",
    )
    ax1.set_xlabel("–ß–∞—Å –¥–Ω—è")
    ax1.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤")
    ax1.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —á–∞—Å–∞–º –¥–Ω—è", fontsize=14, fontweight="bold")
    ax1.grid(True, alpha=0.3)

    # –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —á–∞—Å—ã –ø–∏–∫
    peak_hours = hourly_stats.nlargest(3, "total_orders")
    for hour in peak_hours["hour"]:
        ax1.axvspan(
            hour - 0.4,
            hour + 0.4,
            alpha=0.3,
            color="red",
            label="–ß–∞—Å –ø–∏–∫" if hour == peak_hours["hour"].iloc[0] else "",
        )

    # –ì—Ä–∞—Ñ–∏–∫ 2: –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ —á–∞—Å–∞–º
    ax2.plot(
        hourly_stats["hour"],
        hourly_stats["completion_rate"],
        marker="o",
        linewidth=2,
        color="green",
        markersize=6,
    )
    ax2.fill_between(
        hourly_stats["hour"], hourly_stats["completion_rate"], alpha=0.3, color="green"
    )
    ax2.set_xlabel("–ß–∞—Å –¥–Ω—è")
    ax2.set_ylabel("–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (%)")
    ax2.set_title(
        "–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ —á–∞—Å–∞–º", fontsize=14, fontweight="bold"
    )
    ax2.grid(True, alpha=0.3)
    ax2.set_ylim(0, 100)

    # –ì—Ä–∞—Ñ–∏–∫ 3: –ó–∞–∫–∞–∑—ã –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    days_order = [
        "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "–í—Ç–æ—Ä–Ω–∏–∫",
        "–°—Ä–µ–¥–∞",
        "–ß–µ—Ç–≤–µ—Ä–≥",
        "–ü—è—Ç–Ω–∏—Ü–∞",
        "–°—É–±–±–æ—Ç–∞",
        "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    ]
    daily_stats_sorted = daily_stats.set_index("day_name").loc[days_order].reset_index()

    bars = ax3.bar(
        daily_stats_sorted["day_name"],
        daily_stats_sorted["total_orders"],
        color="skyblue",
        alpha=0.7,
        edgecolor="navy",
    )
    ax3.set_xlabel("–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏")
    ax3.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤")
    ax3.set_title(
        "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏", fontsize=14, fontweight="bold"
    )
    ax3.tick_params(axis="x", rotation=45)
    ax3.grid(True, alpha=0.3)

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for bar in bars:
        height = bar.get_height()
        ax3.text(
            bar.get_x() + bar.get_width() / 2.0,
            height + max(daily_stats_sorted["total_orders"]) * 0.01,
            f"{int(height):,}",
            ha="center",
            va="bottom",
            fontsize=10,
        )

    # –ì—Ä–∞—Ñ–∏–∫ 4: –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—á–∞—Å √ó –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏)
    heatmap_data = df.pivot_table(
        index="order_day_name_ru",
        columns="order_hour",
        values="order_id",
        aggfunc="count",
        fill_value=0,
    )

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    days_order_ru = [
        "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "–í—Ç–æ—Ä–Ω–∏–∫",
        "–°—Ä–µ–¥–∞",
        "–ß–µ—Ç–≤–µ—Ä–≥",
        "–ü—è—Ç–Ω–∏—Ü–∞",
        "–°—É–±–±–æ—Ç–∞",
        "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    ]
    heatmap_data = heatmap_data.reindex(days_order_ru)

    im = ax4.imshow(heatmap_data, cmap="YlOrRd", aspect="auto")
    ax4.set_xlabel("–ß–∞—Å –¥–Ω—è")
    ax4.set_ylabel("–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏")
    ax4.set_title(
        "–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n(–∑–∞–∫–∞–∑—ã –ø–æ –¥–Ω—è–º –∏ —á–∞—Å–∞–º)",
        fontsize=14,
        fontweight="bold",
    )
    ax4.set_xticks(range(24))
    ax4.set_xticklabels([f"{h:02d}" for h in range(24)])
    ax4.set_yticks(range(len(days_order_ru)))
    ax4.set_yticklabels(days_order_ru)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —à–∫–∞–ª—É
    plt.colorbar(im, ax=ax4, fraction=0.046, pad=0.04)

    plt.tight_layout()
    plt.savefig(f"{save_path}12_peak_hours_analysis.png", dpi=300, bbox_inches="tight")
    plt.show()


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —á–∞—Å–æ–≤
def analyze_hour_segments(df):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ–≥–º–µ–Ω—Ç—ã –¥–Ω—è
    """
    print("\nüéØ –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–Ø –î–ù–Ø:")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –¥–Ω—è
    morning = df[(df["order_hour"] >= 6) & (df["order_hour"] < 12)]
    afternoon = df[(df["order_hour"] >= 12) & (df["order_hour"] < 18)]
    evening = df[(df["order_hour"] >= 18) & (df["order_hour"] < 24)]
    night = df[(df["order_hour"] >= 0) & (df["order_hour"] < 6)]

    segments = {
        "–£—Ç—Ä–æ (06:00-11:59)": morning,
        "–î–µ–Ω—å (12:00-17:59)": afternoon,
        "–í–µ—á–µ—Ä (18:00-23:59)": evening,
        "–ù–æ—á—å (00:00-05:59)": night,
    }

    for name, segment in segments.items():
        if len(segment) > 0:
            cancel_rate = round(
                (len(segment[segment["is_done"] == "cancel"]) / len(segment) * 100), 2
            )
            print(f"‚Ä¢ {name}: {len(segment):,} –∑–∞–∫–∞–∑–æ–≤, –æ—Ç–º–µ–Ω—ã: {cancel_rate}%")


# –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
if __name__ == "__main__":
    df = pd.read_csv("./train.csv")
    peak_analysis = analyze_peak_hours(df)
    analyze_hour_segments(df)
