import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


def analyze_absolute_low_bid_cancels(df, save_path="visualizations/"):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –Ω–∏–∑–∫–∏—Ö –±–∏–¥–æ–≤ –≤ —á–∞—Å—ã –ø–∏–∫
    """
    import os

    os.makedirs(save_path, exist_ok=True)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    df["order_timestamp"] = pd.to_datetime(df["order_timestamp"])
    df["order_hour"] = df["order_timestamp"].dt.hour

    print("=" * 70)
    print("–ê–ù–ê–õ–ò–ó –ê–ë–°–û–õ–Æ–¢–ù–û–ì–û –ö–û–õ–ò–ß–ï–°–¢–í–ê –û–¢–ö–õ–û–ù–ï–ù–ù–´–• –ù–ò–ó–ö–ò–• –ë–ò–î–û–í")
    print("=" * 70)

    # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å—ã –ø–∏–∫
    hourly_orders = df.groupby("order_hour").size()
    peak_threshold = hourly_orders.quantile(0.75)
    peak_hours_list = hourly_orders[hourly_orders >= peak_threshold].index.tolist()
    df["is_peak_hour"] = df["order_hour"].isin(peak_hours_list)

    # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    df["is_low_bid_cancel"] = (df["is_done"] == "cancel") & (
        df["price_bid_local"] <= df["price_start_local"]
    )

    # 3. –ê–Ω–∞–ª–∏–∑ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤
    hourly_absolute = (
        df.groupby("order_hour")
        .agg(
            {
                "order_id": "count",
                "is_low_bid_cancel": "sum",
                "is_done": lambda x: (x == "cancel").sum(),  # –í—Å–µ –æ—Ç–º–µ–Ω—ã
            }
        )
        .reset_index()
    )

    hourly_absolute.columns = ["hour", "total_orders", "low_bid_cancels", "all_cancels"]
    hourly_absolute["is_peak"] = hourly_absolute["hour"].isin(peak_hours_list)

    # 4. –°—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_low_bid_cancels = hourly_absolute["low_bid_cancels"].sum()
    peak_low_bid_cancels = hourly_absolute[hourly_absolute["is_peak"]][
        "low_bid_cancels"
    ].sum()
    off_peak_low_bid_cancels = hourly_absolute[~hourly_absolute["is_peak"]][
        "low_bid_cancels"
    ].sum()

    print("\nüìä –ê–ë–°–û–õ–Æ–¢–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:")
    print(f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –Ω–∏–∑–∫–∏—Ö –±–∏–¥–æ–≤: {total_low_bid_cancels:,}")
    print(f"‚Ä¢ –í —á–∞—Å—ã –ø–∏–∫: {peak_low_bid_cancels:,}")
    print(f"‚Ä¢ –í–Ω–µ —á–∞—Å–æ–≤ –ø–∏–∫: {off_peak_low_bid_cancels:,}")
    print(
        f"‚Ä¢ –î–æ–ª—è –≤ —á–∞—Å—ã –ø–∏–∫: {peak_low_bid_cancels / total_low_bid_cancels * 100:.1f}%"
    )

    # 5. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ–∂–∏–¥–∞–µ–º—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
    total_peak_orders = hourly_absolute[hourly_absolute["is_peak"]][
        "total_orders"
    ].sum()
    total_off_peak_orders = hourly_absolute[~hourly_absolute["is_peak"]][  # noqa: F841
        "total_orders"
    ].sum()

    expected_peak_cancels = total_low_bid_cancels * (total_peak_orders / len(df))
    actual_vs_expected = peak_low_bid_cancels - expected_peak_cancels

    print("\nüìà –°–†–ê–í–ù–ï–ù–ò–ï –° –û–ñ–ò–î–ê–ï–ú–´–ú –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï–ú:")
    print(f"‚Ä¢ –û–∂–∏–¥–∞–ª–æ—Å—å –≤ —á–∞—Å—ã –ø–∏–∫: {expected_peak_cancels:.0f}")
    print(f"‚Ä¢ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤ —á–∞—Å—ã –ø–∏–∫: {peak_low_bid_cancels:,}")
    print(
        f"‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞: {actual_vs_expected:+.0f} ({actual_vs_expected / expected_peak_cancels * 100:+.1f}%)"
    )

    # 6. –¢–æ–ø —á–∞—Å–æ–≤ –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–±–ª–µ–º
    print("\nüèÜ –¢–û–ü-5 –ß–ê–°–û–í –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ –û–¢–ö–õ–û–ù–ï–ù–ù–´–• –ù–ò–ó–ö–ò–• –ë–ò–î–û–í:")
    top_absolute = hourly_absolute.nlargest(5, "low_bid_cancels")
    for _, row in top_absolute.iterrows():
        peak_status = "–ü–ò–ö" if row["is_peak"] else "–Ω–µ –ø–∏–∫"
        percentage_of_total = row["low_bid_cancels"] / total_low_bid_cancels * 100
        print(
            f"‚Ä¢ {int(row['hour']):02d}:00 - {int(row['low_bid_cancels']):,} —Å–ª—É—á–∞–µ–≤ "
            f"({percentage_of_total:.1f}% –æ—Ç –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º, {peak_status})"
        )

    # 7. –ê–Ω–∞–ª–∏–∑ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–±–ª–µ–º
    print("\nüìã –ü–õ–û–¢–ù–û–°–¢–¨ –ü–†–û–ë–õ–ï–ú:")
    peak_hours_count = len(peak_hours_list)
    off_peak_hours_count = 24 - peak_hours_count

    problems_per_peak_hour = peak_low_bid_cancels / peak_hours_count
    problems_per_off_peak_hour = off_peak_low_bid_cancels / off_peak_hours_count

    print(f"‚Ä¢ –ß–∞—Å–æ–≤ –ø–∏–∫: {peak_hours_count}")
    print(f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º –≤ —á–∞—Å –ø–∏–∫: {problems_per_peak_hour:.1f}")
    print(f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º –≤ –Ω–µ–ø–∏–∫–æ–≤—ã–π —á–∞—Å: {problems_per_off_peak_hour:.1f}")
    print(f"‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {problems_per_peak_hour / problems_per_off_peak_hour:.1f}:1")

    # 8. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    create_absolute_visualizations(df, hourly_absolute, save_path)

    # 9. –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å
    from scipy.stats import mannwhitneyu

    peak_data = hourly_absolute[hourly_absolute["is_peak"]]["low_bid_cancels"]
    off_peak_data = hourly_absolute[~hourly_absolute["is_peak"]]["low_bid_cancels"]

    stat, p_value = mannwhitneyu(peak_data, off_peak_data, alternative="two-sided")

    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ê–Ø –ó–ù–ê–ß–ò–ú–û–°–¢–¨:")
    print(f"‚Ä¢ U-—Ç–µ—Å—Ç –ú–∞–Ω–Ω–∞-–£–∏—Ç–Ω–∏: p-value = {p_value:.4f}")

    if p_value < 0.05:
        print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞—Ö")
        if peak_data.mean() > off_peak_data.mean():
            print("‚Ä¢ –í —á–∞—Å—ã –ø–∏–∫ –°–ò–õ–¨–ù–û –ë–û–õ–¨–®–ï –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –ø—Ä–æ–±–ª–µ–º")
        else:
            print("‚Ä¢ –í —á–∞—Å—ã –ø–∏–∫ –°–ò–õ–¨–ù–û –ú–ï–ù–¨–®–ï –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –ø—Ä–æ–±–ª–µ–º")
    else:
        print("‚ùå –ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–æ–π —Ä–∞–∑–Ω–∏—Ü—ã –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞—Ö")

    return {
        "hourly_absolute": hourly_absolute,
        "total_low_bid_cancels": total_low_bid_cancels,
        "peak_low_bid_cancels": peak_low_bid_cancels,
        "off_peak_low_bid_cancels": off_peak_low_bid_cancels,
        "problems_per_peak_hour": problems_per_peak_hour,
        "problems_per_off_peak_hour": problems_per_off_peak_hour,
    }


def create_absolute_visualizations(df, hourly_absolute, save_path):
    """
    –°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    """
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))

    # –ì—Ä–∞—Ñ–∏–∫ 1: –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º –ø–æ —á–∞—Å–∞–º
    colors = ["red" if peak else "blue" for peak in hourly_absolute["is_peak"]]
    bars = ax1.bar(
        hourly_absolute["hour"],
        hourly_absolute["low_bid_cancels"],
        color=colors,
        alpha=0.7,
        edgecolor="black",
    )
    ax1.set_xlabel("–ß–∞—Å –¥–Ω—è")
    ax1.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –Ω–∏–∑–∫–∏—Ö –±–∏–¥–æ–≤")
    ax1.set_title(
        "–ê–ë–°–û–õ–Æ–¢–ù–û–ï –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º –ø–æ —á–∞—Å–∞–º\n(–∫—Ä–∞—Å–Ω—ã–π - —á–∞—Å—ã –ø–∏–∫)",
        fontsize=14,
        fontweight="bold",
    )
    ax1.grid(True, alpha=0.3)

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for bar in bars:
        height = bar.get_height()
        if height > 0:
            ax1.text(
                bar.get_x() + bar.get_width() / 2.0,
                height + max(hourly_absolute["low_bid_cancels"]) * 0.01,
                f"{int(height)}",
                ha="center",
                va="bottom",
                fontsize=9,
            )

    # –õ–µ–≥–µ–Ω–¥–∞
    from matplotlib.patches import Patch

    legend_elements = [
        Patch(facecolor="red", alpha=0.7, label="–ß–∞—Å—ã –ø–∏–∫"),
        Patch(facecolor="blue", alpha=0.7, label="–í–Ω–µ —á–∞—Å–æ–≤ –ø–∏–∫"),
    ]
    ax1.legend(handles=legend_elements)

    # –ì—Ä–∞—Ñ–∏–∫ 2: –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    hourly_sorted = hourly_absolute.sort_values("low_bid_cancels", ascending=False)
    cumulative_percentage = (
        hourly_sorted["low_bid_cancels"].cumsum()
        / hourly_sorted["low_bid_cancels"].sum()
        * 100
    )

    ax2.plot(
        range(1, len(hourly_sorted) + 1),
        cumulative_percentage,
        marker="o",
        linewidth=2,
        color="purple",
    )
    ax2.axhline(y=80, color="red", linestyle="--", alpha=0.7, label="80% –ø—Ä–æ–±–ª–µ–º")
    ax2.set_xlabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –ø—Ä–æ–±–ª–µ–º–∞–º)")
    ax2.set_ylabel("–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–±–ª–µ–º (%)")
    ax2.set_title(
        "–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –ø–æ —á–∞—Å–∞–º", fontsize=14, fontweight="bold"
    )
    ax2.grid(True, alpha=0.3)
    ax2.legend()

    # –ù–∞—Ö–æ–¥–∏–º, –∑–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –Ω–∞–±–∏—Ä–∞–µ—Ç—Å—è 80% –ø—Ä–æ–±–ª–µ–º
    hours_for_80 = len(cumulative_percentage[cumulative_percentage <= 80])
    ax2.axvline(
        x=hours_for_80,
        color="green",
        linestyle="--",
        alpha=0.7,
        label=f"{hours_for_80} —á–∞—Å–æ–≤ –¥–ª—è 80% –ø—Ä–æ–±–ª–µ–º",
    )

    # –ì—Ä–∞—Ñ–∏–∫ 3: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∏–∫–æ–≤—ã—Ö –∏ –Ω–µ–ø–∏–∫–æ–≤—ã—Ö —á–∞—Å–æ–≤
    peak_data = hourly_absolute[hourly_absolute["is_peak"]]["low_bid_cancels"]
    off_peak_data = hourly_absolute[~hourly_absolute["is_peak"]]["low_bid_cancels"]

    categories = ["–ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã", "–ù–µ–ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã"]
    values = [peak_data.sum(), off_peak_data.sum()]
    colors_comparison = ["red", "blue"]

    bars_comp = ax3.bar(
        categories, values, color=colors_comparison, alpha=0.7, edgecolor="black"
    )
    ax3.set_ylabel("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º")
    ax3.set_title(
        "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–±–ª–µ–º\n–≤ –ø–∏–∫–æ–≤—ã–µ vs –Ω–µ–ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã",
        fontsize=14,
        fontweight="bold",
    )
    ax3.grid(True, alpha=0.3)

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for bar, value in zip(bars_comp, values):
        height = bar.get_height()
        ax3.text(
            bar.get_x() + bar.get_width() / 2.0,
            height + max(values) * 0.01,
            f"{int(value):,}",
            ha="center",
            va="bottom",
            fontweight="bold",
        )

    # –ì—Ä–∞—Ñ–∏–∫ 4: –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∏ –ø—Ä–æ–±–ª–µ–º
    ax4.scatter(
        hourly_absolute["total_orders"],
        hourly_absolute["low_bid_cancels"],
        c=hourly_absolute["is_peak"].astype(int),
        cmap="RdYlBu",
        s=100,
        alpha=0.7,
    )
    ax4.set_xlabel("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –≤ —á–∞—Å")
    ax4.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –Ω–∏–∑–∫–∏—Ö –±–∏–¥–æ–≤")
    ax4.set_title(
        "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: –∑–∞–∫–∞–∑—ã vs –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã\n(–∫—Ä–∞—Å–Ω—ã–π - —á–∞—Å—ã –ø–∏–∫)",
        fontsize=14,
        fontweight="bold",
    )
    ax4.grid(True, alpha=0.3)

    # –õ–∏–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
    z = np.polyfit(
        hourly_absolute["total_orders"], hourly_absolute["low_bid_cancels"], 1
    )
    p = np.poly1d(z)
    ax4.plot(
        hourly_absolute["total_orders"],
        p(hourly_absolute["total_orders"]),
        "r--",
        alpha=0.8,
        label=f"–¢—Ä–µ–Ω–¥: y = {z[0]:.3f}x + {z[1]:.2f}",
    )

    # –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –≤—ã–±—Ä–æ—Å–æ–≤
    for _, row in hourly_absolute.nlargest(3, "low_bid_cancels").iterrows():
        ax4.annotate(
            f"{int(row['hour']):02d}:00\n{int(row['low_bid_cancels'])}",
            (row["total_orders"], row["low_bid_cancels"]),
            xytext=(10, 10),
            textcoords="offset points",
            bbox=dict(boxstyle="round,pad=0.3", fc="yellow", alpha=0.7),
            arrowprops=dict(arrowstyle="->", connectionstyle="arc3,rad=0"),
        )

    ax4.legend()

    plt.tight_layout()
    plt.savefig(f"{save_path}16_absolute_analysis.png", dpi=300, bbox_inches="tight")
    plt.show()

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: –≤—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞
    fig, ax = plt.subplots(figsize=(15, 6))

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥
    time_series = df[df["is_low_bid_cancel"]].copy()
    time_series["time_group"] = time_series["order_timestamp"].dt.floor("H")
    hourly_timeline = time_series.groupby("time_group").size()

    ax.plot(
        hourly_timeline.index,
        hourly_timeline.values,
        linewidth=1,
        alpha=0.7,
        color="red",
    )
    ax.scatter(
        hourly_timeline.index, hourly_timeline.values, s=20, color="darkred", alpha=0.8
    )

    ax.set_xlabel("–í—Ä–µ–º—è")
    ax.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º –≤ —á–∞—Å")
    ax.set_title(
        "–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥: –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –Ω–∏–∑–∫–∏–µ –±–∏–¥—ã –ø–æ —á–∞—Å–∞–º",
        fontsize=14,
        fontweight="bold",
    )
    ax.tick_params(axis="x", rotation=45)
    ax.grid(True, alpha=0.3)

    plt.tight_layout()
    plt.savefig(f"{save_path}17_timeline_analysis.png", dpi=300, bbox_inches="tight")
    plt.show()


# –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
if __name__ == "__main__":
    df = pd.read_csv("./train.csv")
    absolute_results = analyze_absolute_low_bid_cancels(df)
